name: Repo Surveyor

on:
  workflow_dispatch: {}

permissions:
  contents: write   # needed to push to the repo

jobs:
  survey:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Run Surveyor
        run: |
          python - <<'PY'
          import os, re, json, pathlib

          ROOT = pathlib.Path(".")
          OUT = ROOT / "survey_out"
          OUT.mkdir(exist_ok=True)

          SKIP_DIRS = {".git","node_modules","dist","build","out",".next",".vite","coverage",".venv","__pycache__","target",".dart_tool",".gradle",".idea",".vscode"}
          CODE_EXT = {".js",".ts",".tsx",".jsx",".py",".go",".rb",".rs",".java",".kt",".php",".cs",".scala",".sql",".yml",".yaml",".json",".toml",".graphql",".gql"}
          MAX_FILE_BYTES = 1_500_000

          def walk_files():
            for p in ROOT.rglob("*"):
              if p.is_file():
                if any(part in SKIP_DIRS for part in p.parts):
                  continue
                try:
                  if p.stat().st_size <= MAX_FILE_BYTES:
                    yield p
                except Exception:
                  pass

          def read_text(p):
            try:
              return p.read_text(encoding="utf-8", errors="ignore")
            except Exception:
              return ""

          # Repo map (depth 3)
          def repo_map(depth=3):
            tree = {}
            for p in walk_files():
              rel = p.relative_to(ROOT).parts
              node = tree
              for i, part in enumerate(rel[:depth]):
                node = node.setdefault(part, {} if i < depth-1 else None)
            lines=[]
            def rec(n, d=0):
              if n is None: return
              for k in sorted(n.keys()):
                lines.append(f"{'  '*d}{k}/" if n[k] is not None else f"{'  '*d}{k}")
                rec(n[k], d+1)
            rec(tree)
            return "\n".join(lines)

          P = {
            "SERVER_ENDPOINTS": re.compile(r"(?:app\.(?:get|post|put|delete|patch|use)\s*\()|(?:new\s+Express\s*\()|(?:FastAPI\s*\()|(?:@app\.route)|(?:gin\.Default\(\))|(?:http\.ListenAndServe)|(?:Flask\()|(?:NestFactory\.create)|(?:router\.add_api_route)", re.X),
            "API_HINTS": re.compile(r"openapi:|swagger:|schema\.graphql|\btype\s+Query\b|\btype\s+Mutation\b|z\.object\(|t\.router\(", re.I),
            "FE_ROUTES": re.compile(r"createBrowserRouter\(|react-router|next/navigation|NextResponse|pages/|app/|vue-router|defineRoute", re.I),
            "DATA_MODELS": re.compile(r"prisma\.schema|@Entity\(|Sequelize\.define\(|mongoose\.model\(|SQLAlchemy|TypeORM|ActiveRecord|Django\s+models", re.I),
            "TESTS": re.compile(r"\b(describe|it|test)\s*\(|\bpytest\b|\bunittest\b|\brspec\b|\bJUnit\b", re.I),
            "ENV_VARS": re.compile(r"(?:process\.env\.[A-Z0-9_]+)|(?:os\.environ\[['\"][A-Z0-9_]+['\"]\])|(?:getenv\(['\"][A-Z0-9_]+['\"]\))|(?:System\.getenv\(['\"][A-Z0-9_]+['\"]\))", re.X),
            "EXTERNALS": re.compile(r"stripe|twilio|sendgrid|mailgun|s3|boto3|@aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),
          }
          buckets = {k: [] for k in P.keys()}

          for path in walk_files():
            ext = path.suffix.lower()
            if ext and ext not in CODE_EXT and path.name not in {"urls.py"}:
              continue
            txt = read_text(path)
            if not txt:
              continue
            for name, rx in P.items():
              for m in rx.finditer(txt):
                line = txt.count("\n", 0, m.start()) + 1
                snippet = txt[m.start():m.start()+120].replace("\n"," ")
                buckets[name].append(f"{path.as_posix()}:{line}: {snippet}")

          (OUT / "REPO_MAP.txt").write_text(repo_map(), encoding="utf-8")
          for k, v in buckets.items():
            (OUT / f"{k}.txt").write_text("\n".join(v), encoding="utf-8")

          fe_pages = [p.as_posix() for p in walk_files() if "/pages/" in p.as_posix() or "/app/" in p.as_posix()]
          (OUT / "FE_PAGES_FILES.txt").write_text("\n".join(sorted(fe_pages)), encoding="utf-8")

          manifests = {}
          for m in ["README.md","package.json","pnpm-workspace.yaml","yarn.lock","requirements.txt","pyproject.toml","poetry.lock","go.mod","Cargo.toml","composer.json","Gemfile","Gemfile.lock","pom.xml","build.gradle","settings.gradle","Pipfile","Pipfile.lock"]:
            f = ROOT / m
            if f.exists():
              manifests[m] = read_text(f)[:200000]
          (OUT / "MANIFESTS.json").write_text(json.dumps(manifests, indent=2), encoding="utf-8")

          evidence = {
            "counts": {k: len(v) for k,v in buckets.items()},
            "fe_pages_count": len(fe_pages),
            "manifests_present": list(manifests.keys())
          }
          (OUT / "EVIDENCE.json").write_text(json.dumps(evidence, indent=2), encoding="utf-8")
          print("✅ Wrote survey_out/*")
          PY

      - name: Upload artifact (optional download)
        uses: actions/upload-artifact@v4
        with:
          name: repo-survey
          path: survey_out/*
          if-no-files-found: error

      - name: Commit survey_out into docs/repo-survey on default branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Resolve default branch
          DEFAULT_BRANCH="${GITHUB_REF_NAME:-$(git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@')}"
          git checkout "${DEFAULT_BRANCH}"

          mkdir -p docs/repo-survey
          RUN_ID="${{ github.run_id }}"
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          DEST="docs/repo-survey/${TS}_${RUN_ID}"
          mkdir -p "$DEST"

          cp -R survey_out/* "$DEST"/

          # Create or update an index.md with a simple listing
          INDEX="docs/repo-survey/index.md"
          if [ ! -f "$INDEX" ]; then
            cat > "$INDEX" <<'MD'
          # Repo Survey Reports

          Below are generated reverse-engineering bundles. Click a run to view artifacts.

          MD
          fi

          echo "" >> "$INDEX"
          echo "- ${TS} (run ${RUN_ID}) → [view](${TS}_${RUN_ID}/)" >> "$INDEX"

          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          git add "$DEST" "$INDEX"

          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "repo-survey: ${TS} (run ${RUN_ID}) → docs/repo-survey/"
            git push origin "${DEFAULT_BRANCH}"
          fi

      - name: Echo where to view Pages
        run: |
          echo "::notice title=GitHub Pages path::Open https://github.com/${{ github.repository }}/settings/pages and ensure 'Deploy from a branch' with folder '/docs'."
          echo "::notice title=Docs URL (typical)::https://<your-user-or-org>.github.io/<repo>/repo-survey/ (or /docs/repo-survey/ if site root differs)"