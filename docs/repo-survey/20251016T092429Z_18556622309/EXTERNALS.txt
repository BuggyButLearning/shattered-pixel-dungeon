.github/workflows/repo-surveyor.yml:79: stripe|twilio|sendgrid|mailgun|s3|boto3|@aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|s
.github/workflows/repo-surveyor.yml:79: twilio|sendgrid|mailgun|s3|boto3|@aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|n
.github/workflows/repo-surveyor.yml:79: sendgrid|mailgun|s3|boto3|@aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic
.github/workflows/repo-surveyor.yml:79: mailgun|s3|boto3|@aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|
.github/workflows/repo-surveyor.yml:79: s3|boto3|@aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|
.github/workflows/repo-surveyor.yml:79: boto3|@aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mix
.github/workflows/repo-surveyor.yml:79: @aws-sdk|firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|
.github/workflows/repo-surveyor.yml:79: firebase|supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agen
.github/workflows/repo-surveyor.yml:79: supabase|algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery
.github/workflows/repo-surveyor.yml:79: algolia|auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidek
.github/workflows/repo-surveyor.yml:79: auth0|clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apsch
.github/workflows/repo-surveyor.yml:79: clerk|okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler
.github/workflows/repo-surveyor.yml:79: okta|passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.
.github/workflows/repo-surveyor.yml:79: passport|next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),  
.github/workflows/repo-surveyor.yml:79: next-auth|datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           
.github/workflows/repo-surveyor.yml:79: datadog|sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           }         
.github/workflows/repo-surveyor.yml:79: sentry|newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           }           bucket
.github/workflows/repo-surveyor.yml:79: newrelic|posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           }           buckets = {k:
.github/workflows/repo-surveyor.yml:79: posthog|segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k
.github/workflows/repo-surveyor.yml:79: segment|mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k in P.ke
.github/workflows/repo-surveyor.yml:79: mixpanel|bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k in P.keys()}   
.github/workflows/repo-surveyor.yml:79: bull|agenda|celery|rq|sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k in P.keys()}            
.github/workflows/repo-surveyor.yml:79: agenda|celery|rq|sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k in P.keys()}            for p
.github/workflows/repo-surveyor.yml:79: celery|rq|sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k in P.keys()}            for path in 
.github/workflows/repo-surveyor.yml:79: rq|sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k in P.keys()}            for path in walk_fi
.github/workflows/repo-surveyor.yml:79: sidekiq|apscheduler", re.I),           }           buckets = {k: [] for k in P.keys()}            for path in walk_files
.github/workflows/repo-surveyor.yml:79: apscheduler", re.I),           }           buckets = {k: [] for k in P.keys()}            for path in walk_files():     
SPD-classes/src/main/java/com/watabou/utils/ColorMath.java:57: segment = (int)((colors.length-1) * p); 		return interpolate( colors[segment], colors[segment+1], (p * (colors.length - 
SPD-classes/src/main/java/com/watabou/utils/ColorMath.java:58: segment], colors[segment+1], (p * (colors.length - 1)) % 1 ); 	} 	 	public static int random( int a, int b ) { 		return 
SPD-classes/src/main/java/com/watabou/utils/ColorMath.java:58: segment+1], (p * (colors.length - 1)) % 1 ); 	} 	 	public static int random( int a, int b ) { 		return interpolate( a, b
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java:329: SENTRY       = "sprites/red_sentry.png"; 		public static final String CRYSTAL_WISP     = "sprites/crystal_wisp.png"; 		p
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java:329: sentry.png"; 		public static final String CRYSTAL_WISP     = "sprites/crystal_wisp.png"; 		public static final String CR
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java:337: SENTRY    = "sprites/fungal_sentry.png"; 		public static final String FUNGAL_CORE      = "sprites/fungal_core.png"; 	} }
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java:337: sentry.png"; 		public static final String FUNGAL_CORE      = "sprites/fungal_core.png"; 	} } 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java:587: RQUOISE= POTIONS+4; 	public static final int POTION_AZURE    = POTIONS+5; 	public static final int POTION_INDIGO   = POT
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java:608: RQUOISE= EXOTIC_POTIONS+4; 	public static final int EXOTIC_AZURE    = EXOTIC_POTIONS+5; 	public static final int EXOTIC_
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/FungalSentrySprite.java:30: SentrySprite extends MobSprite {  	private int cellToAttack;  	public FungalSentrySprite(){ 		super();  		texture( Asset
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/FungalSentrySprite.java:34: SentrySprite(){ 		super();  		texture( Assets.Sprites.FUNGAL_SENTRY );  		TextureFilm frames = new TextureFilm( texture,
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/FungalSentrySprite.java:37: SENTRY );  		TextureFilm frames = new TextureFilm( texture, 18, 18 );  		idle = new Animation( 0, true ); 		idle.frames(
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/mechanics/Ballistica.java:161: segment of the path from start to end, inclusive. 	//if there is an error, returns an empty arraylist instead. 	public L
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/FungalSentry.java:29: SentrySprite; import com.watabou.utils.Random;  public class FungalSentry extends Mob {  	{ 		spriteClass = FungalSentry
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/FungalSentry.java:32: Sentry extends Mob {  	{ 		spriteClass = FungalSentrySprite.class;  		HP = HT = 200; 		defenseSkill = 12;  		EXP = 10; 	
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/FungalSentry.java:35: SentrySprite.class;  		HP = HT = 200; 		defenseSkill = 12;  		EXP = 10; 		maxLvl = -2;  		state = WANDERING = new Waitin
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java:894: Sentry){ 						((WandOfWarding.Ward) mob).upgrade(3); 						((WandOfWarding.Ward) mob).upgrade(3); 						((WandOfWarding
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java:31: rquezo_577_284", "NAVI1237", "No_se145", "STKmonoqui", "Sh4rkill3r", "Uri2523", "alfongad", "alquimistamyl", "anauta", "
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java:39: s34", "mitux", "mustafadoslu", "ryuga", "superDpermn", "yasirckr85", "yukete"}), 	INDONESIAN("indonesia", "in", Status._
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java:205: sentry turrets.\n\n" + 				"The Wand of Warding does very consistent damage, but requires some setup first."));  		chang
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java:513: Firebase Analytics instead of older Google Analytics. Data collected is unchanged.\n" + 				"_-_ Many internal improveme
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java:792: segments, instead of two. All of these segments play in a semi-random pattern, increasing variety for the game's more fr
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java:792: segments play in a semi-random pattern, increasing variety for the game's more frequently heard music.\n" + 				"\n" + 	
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java:1272: Sentry attacks can now be dodged or blocked, but are very accurate.\n" + 				"_-_ Knockback effects now round up after b
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java:860: segment and can play the main segment once or twice before looping back to the intro. This makes the track notably less 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java:860: segment once or twice before looping back to the intro. This makes the track notably less repetative, and we intend to u
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java:227: Sentry HP up to 35/54/84, from 30/48/70\n" + 				"_-_ Upgrade heal up to 19/30, from 18/22\n" + 				"_-_ Regular heal up
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java:408: sentry energy cost and warding energy capacity reduced by 1\n" + 				"_-_ Ward/sentry vision range increased by 1\n" + 	
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java:409: sentry vision range increased by 1\n" + 				"_-_ Ward/sentry attack speed standardized to 0.5x/1x\n" + 				"_-_ Greater 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java:410: sentry attack speed standardized to 0.5x/1x\n" + 				"_-_ Greater wards now get 5 zaps, up from 4\n" + 				"_-_ Lesser s
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java:413: sentry now always grants it the largest possible health boost\n" + 				"_-_ Sentry healing up to 8/10/15 from 6/8/12\n\n
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java:414: Sentry healing up to 8/10/15 from 6/8/12\n\n" + 				"_-_ Ward sprites now visually darken as they use up charges\n" + 		
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Bestiary.java:108: SentryRoom; import com.shatteredpixel.shatteredpixeldungeon.levels.traps.AlarmTrap; import com.shatteredpixel.shatteredp
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Bestiary.java:223: SentryRoom.Sentry.class);  		RARE.addEntities(Albino.class, GnollExile.class, HermitCrab.class, CausticSlime.class, 				
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Bestiary.java:223: Sentry.class);  		RARE.addEntities(Albino.class, GnollExile.class, HermitCrab.class, CausticSlime.class, 				Bandit.clas
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Bestiary.java:240: Sentry.class, WandOfLivingEarth.EarthGuardian.class, 				ShadowClone.ShadowAlly.class, SmokeBomb.NinjaLog.class, SpiritH
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java:96: rquoise",ItemSpriteSheet.POTION_TURQUOISE); 			put("azure",ItemSpriteSheet.POTION_AZURE); 			put("indigo",ItemSpriteShee
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java:96: RQUOISE); 			put("azure",ItemSpriteSheet.POTION_AZURE); 			put("indigo",ItemSpriteSheet.POTION_INDIGO); 			put("magenta"
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java:279: Sentry.class); 			}  			if (tier < 6){ 				tier++; 				viewDistance++; 				if (sprite != null){ 					((WardSprite)sprite
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java:295: Sentry extends Ward{};  		public void wandHeal( int wandLevel ){ 			wandHeal( wandLevel, 1f ); 		}  		public void wandHe
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java:480: sentry"); 				} 			} else { 				return Messages.get(this, "desc_" + tier, 2 + wandLevel, 8 + 4 * wandLevel, tier); 			} 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/CeremonialCandle.java:192: rQuestMusic(); 			}  			for (int i : PathFinder.NEIGHBOURS9){ 				CellEmitter.get(ritualPos+i).burst(ElmoParticle.FACTOR
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:80: rQuestWasActive = Wandmaker.Quest.active(); 	}  	@Override 	protected ArrayList<Room> initRooms() { 		return Wandmaker.Q
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:146: rQuestMusic(); 		} 	}  	private Boolean wandmakerQuestWasActive = null;  	public void updateWandmakerQuestMusic(){ 		if 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:150: rQuestWasActive = null;  	public void updateWandmakerQuestMusic(){ 		if (wandmakerQuestWasActive == null) { 			wandmaker
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:152: rQuestMusic(){ 		if (wandmakerQuestWasActive == null) { 			wandmakerQuestWasActive = Wandmaker.Quest.active(); 			return
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:153: rQuestWasActive == null) { 			wandmakerQuestWasActive = Wandmaker.Quest.active(); 			return; 		} 		if (Wandmaker.Quest.a
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:154: rQuestWasActive = Wandmaker.Quest.active(); 			return; 		} 		if (Wandmaker.Quest.active() != wandmakerQuestWasActive) { 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:157: rQuestWasActive) { 			wandmakerQuestWasActive = Wandmaker.Quest.active();  			Game.runOnRenderThread(new Callback() { 		
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java:158: rQuestWasActive = Wandmaker.Quest.active();  			Game.runOnRenderThread(new Callback() { 				@Override 				public void ca
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:58: SentryRoom extends SpecialRoom {  	@Override 	public int minWidth() { return 7; } 	public int minHeight() { return 7; } 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:77: sentryPos = new Point(); 		Point treasurePos = new Point();  		//length of dangerous path from entrance to treasure and 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:83: sentry, treasure, and paint safe tiles / statues 		if (entrance.x == left){ 			sentryPos.set(right-1, center.y); 			Pain
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:85: sentryPos.set(right-1, center.y); 			Painter.fill(level, left+1, top+1, 1, height()-2, Terrain.EMPTY); 			if (entrance.y
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:103: sentryPos.set(left+1, center.y); 			Painter.fill(level, right-1, top+1, 1, height()-2, Terrain.EMPTY); 			if (entrance.y
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:121: sentryPos.set(center.x, bottom-1); 			Painter.fill(level, left+1, top+1, width()-2, 1, Terrain.EMPTY); 			if (entrance.x
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:139: sentryPos.set(center.x, top+1); 			Painter.fill(level, left+1, bottom-1, width()-2, 1, Terrain.EMPTY); 			if (entrance.x
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:158: sentryPos, Terrain.PEDESTAL); 		Sentry sentry = new Sentry(); 		sentry.pos = level.pointToCell(sentryPos); 		sentry.room
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:159: Sentry sentry = new Sentry(); 		sentry.pos = level.pointToCell(sentryPos); 		sentry.room = new EmptyRoom(); 		sentry.roo
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:159: sentry = new Sentry(); 		sentry.pos = level.pointToCell(sentryPos); 		sentry.room = new EmptyRoom(); 		sentry.room.set((
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:159: Sentry(); 		sentry.pos = level.pointToCell(sentryPos); 		sentry.room = new EmptyRoom(); 		sentry.room.set((Rect)this); 	
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:160: sentry.pos = level.pointToCell(sentryPos); 		sentry.room = new EmptyRoom(); 		sentry.room.set((Rect)this); 		sentry.init
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:160: sentryPos); 		sentry.room = new EmptyRoom(); 		sentry.room.set((Rect)this); 		sentry.initialChargeDelay = sentry.curChar
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:161: sentry.room = new EmptyRoom(); 		sentry.room.set((Rect)this); 		sentry.initialChargeDelay = sentry.curChargeDelay = dang
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:162: sentry.room.set((Rect)this); 		sentry.initialChargeDelay = sentry.curChargeDelay = dangerDist / 3f + 0.1f; 		level.mobs.
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:163: sentry.initialChargeDelay = sentry.curChargeDelay = dangerDist / 3f + 0.1f; 		level.mobs.add( sentry );  		Painter.set(l
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:163: sentry.curChargeDelay = dangerDist / 3f + 0.1f; 		level.mobs.add( sentry );  		Painter.set(level, treasurePos, Terrain.P
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:164: sentry );  		Painter.set(level, treasurePos, Terrain.PEDESTAL); 		level.drop( prize( level ), level.pointToCell(treasure
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:232: Sentry extends NPC {  		{ 			spriteClass = SentrySprite.class;  			properties.add(Property.IMMOVABLE); 		}  		private fl
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:235: SentrySprite.class;  			properties.add(Property.IMMOVABLE); 		}  		private float initialChargeDelay; 		private float cur
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:268: SentrySprite) sprite).charge(); 						} 						curChargeDelay -= Dungeon.hero.cooldown(); 						//pity mechanic so mistap
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:280: SentrySprite) sprite).charge(); 					}  					spend(Dungeon.hero.cooldown()); 					return true;  				} else { 					curCha
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:362: SentrySprite extends MobSprite {  		private final Animation charging; 		private Emitter chargeParticles;  		public Sentr
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:367: SentrySprite(){ 			texture( Assets.Sprites.RED_SENTRY );  			idle = new Animation(1, true); 			idle.frames(texture.uvRec
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:368: SENTRY );  			idle = new Animation(1, true); 			idle.frames(texture.uvRect(0, 0, 8, 15));  			run = idle.clone(); 			att
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:392: Sentry)ch).onZapComplete(); 		}  		@Override 		public void link(Char ch) { 			super.link(ch);  			chargeParticles = cent
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:404: Sentry)ch).curChargeDelay != ((Sentry) ch).initialChargeDelay){ 				play(charging); 			} 		}  		@Override 		public void 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java:404: Sentry) ch).initialChargeDelay){ 				play(charging); 			} 		}  		@Override 		public void die() { 			super.die(); 			if (
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java:84: SentryRoom.class, 			StatueRoom.class, CrystalVaultRoom.class, CrystalChoiceRoom.class, SacrificeRoom.class 	));  	//10 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java:103: SentryRoom.class, StorageRoom.class, ToxicGasRoom.class, MagicalFireRoom.class, TrapsRoom.class 	) );  	public static Ar
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/SegmentedLibraryRoom.java:31: segmented room with changed constants in here, might want to externalize public class SegmentedLibraryRoom extends Stand
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/SegmentedLibraryRoom.java:32: SegmentedLibraryRoom extends StandardRoom {  	@Override 	public float[] sizeCatProbs() { 		return new float[]{0, 3, 1}; 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StandardBridgeRoom.java:73: segment the most doors, or the most space in the room 		int doorsXY = 0; 		for (Door door : connected.values()) { 			doo
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StripedRoom.java:31: StripedRoom extends StandardRoom { 	 	@Override 	public float[] sizeCatProbs() { 		return new float[]{2, 1, 0}; 	} 	 	@O
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StripedRoom.java:40: StripedRoom && mergeTerrain == Terrain.EMPTY){ 			super.merge(l, other, merge, Terrain.EMPTY_SP); 		} else { 			super.me
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StandardRoom.java:133: SegmentedRoom.class); 		rooms.add(PillarsRoom.class); 		rooms.add(ChasmBridgeRoom.class); 		rooms.add(CellBlockRoom.clas
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StandardRoom.java:148: SegmentedLibraryRoom.class);  		rooms.add(RuinsRoom.class); 		rooms.add(RegionDecoPatchRoom.class); 		rooms.add(ChasmRoo
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StandardRoom.java:163: StripedRoom.class); 		rooms.add(StudyRoom.class); 		rooms.add(SuspiciousChestRoom.class); 		rooms.add(MinefieldRoom.clas
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/SegmentedRoom.java:31: SegmentedRoom extends StandardRoom {  	@Override 	public int minWidth() { 		return Math.max(super.minWidth(), 7); 	} 	 	
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/quest/MineLargeRoom.java:25: Sentry; import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard; import com.shatteredpixel.shatteredpixel
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/quest/MineLargeRoom.java:202: Sentry m = new FungalSentry(); 			m.pos = level.pointToCell(p); 			level.mobs.add(m); 			Painter.set(level, p, Terrain.G
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/quest/MineLargeRoom.java:202: Sentry(); 			m.pos = level.pointToCell(p); 			level.mobs.add(m); 			Painter.set(level, p, Terrain.GRASS);  			//no high 
core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/quest/MineLargeRoom.java:207: sentry 			p.y--; 			Painter.set(level, p, Terrain.GRASS);  		} else { 			Painter.fillEllipse(level, this, 3, Terrain.EMP